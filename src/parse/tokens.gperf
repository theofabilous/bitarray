%delimiters=,
%{
#include <stdint.h>
#include <string.h>
typedef struct HashToken HashToken;
%}
struct HashToken
{
	const char* name;
	uint8_t precedence;
	uint16_t tokenize_flags;
	uint16_t tree_flags;
	uint16_t compile_flags;
	const char* descr;
	uint8_t max_search_size;
};
%%
+, 40, 0b00000000000000, 0b00000000000001, 0b00000000000000, "PLUS", 0
-, 40, 0b00000000000001, 0b00000000000001, 0b00000000000000, "MINUS", 2
=, 1, 0b00000000000001, 0b00000000000001, 0b00000000000000, "ASSIGN", 2
*, 10, 0b00000000000001, 0b00000000000001, 0b00000000000000, "REPEAT", 2
**, 10, 0b00000000000000, 0b00000000000001, 0b00000000000000, "REPEAT", 0
"%", 50, 0b00000000000000, 0b00000000000001, 0b00000000000000, "Align", 0
>, 70, 0b00000000000001, 0b00000000000001, 0b00000000000000, "Greater", 2
<, 70, 0b00000000000001, 0b00000000000001, 0b00000000000000, "Smaller", 2
>=, 70, 0b00000000000000, 0b00000000000001, 0b00000000000000, "GreEq", 0
<=, 70, 0b00000000000000, 0b00000000000001, 0b00000000000000, "SmEq", 0
==, 70, 0b00000000000000, 0b00000000000001, 0b00000000000000, "Eq", 0
!=, 70, 0b00000000000000, 0b00000000000001, 0b00000000000000, "NEq", 0
:=, 89, 0b00000000000000, 0b00000000000001, 0b00000000000000, "WalrusAssign", 0
<-, 10, 0b00000000000000, 0b00000000000001, 0b00000000000000, "???", 0
->, 10, 0b00000000000000, 0b00000000000001, 0b00000000000000, "DoWhile", 0
<<, 60, 0b00000000000000, 0b00000000000001, 0b00000000000000, "ShiftLeft", 0
>>, 60, 0b00000000000000, 0b00000000000001, 0b00000000000000, "ShiftRight", 0
|, 60, 0b00000000000001, 0b00000000000001, 0b00000000000000, "BitOr", 2
&, 60, 0b00000000000001, 0b00000000000001, 0b00000000000000, "BitAnd", 2
&&, 57, 0b00000000000000, 0b00000000000001, 0b00000000000000, "And", 0
||, 57, 0b00000000000000, 0b00000000000001, 0b00000000000000, "Or", 0
:, 55, 0b00000000000001, 0b00000000000001, 0b00000000000000, "If_Else", 2
?, 20, 0b00000000000000, 0b00000000000001, 0b00000000000000, "Conditional", 0
u, 100, 0b00000000000000, 0b00000100000010, 0b00000000000000, "Unsigned", 0
i, 100, 0b00000000000000, 0b00000100000010, 0b00000000000000, "Signed", 0
b, 100, 0b00000000000000, 0b00000100000010, 0b00000000000000, "Bits", 0
^, 80, 0b00000000000000, 0b00000100000010, 0b00000000000000, "Peek", 0
B, 100, 0b00000000000000, 0b00000000000010, 0b00000000000000, "Bytes", 0
$, 100, 0b00000000000000, 0b00000000000010, 0b00000000000000, "Env", 0
@, 100, 0b00000000000000, 0b00000000000010, 0b00000000000000, "Ref", 0
!, 100, 0b00000000000001, 0b00000000000010, 0b00000000000000, "Skip", 2
., 90, 0b00000000000000, 0b00000100000100, 0b00000000000000, "BigEndian", 0
0, 0, 0b00000000000000, 0b00000000001000, 0b00000000000000, "DIGIT", 0
1, 0, 0b00000000000000, 0b00000000001000, 0b00000000000000, "DIGIT", 0
2, 0, 0b00000000000000, 0b00000000001000, 0b00000000000000, "DIGIT", 0
3, 0, 0b00000000000000, 0b00000000001000, 0b00000000000000, "DIGIT", 0
4, 0, 0b00000000000000, 0b00000000001000, 0b00000000000000, "DIGIT", 0
5, 0, 0b00000000000000, 0b00000000001000, 0b00000000000000, "DIGIT", 0
6, 0, 0b00000000000000, 0b00000000001000, 0b00000000000000, "DIGIT", 0
7, 0, 0b00000000000000, 0b00000000001000, 0b00000000000000, "DIGIT", 0
8, 0, 0b00000000000000, 0b00000000001000, 0b00000000000000, "DIGIT", 0
9, 0, 0b00000000000000, 0b00000000001000, 0b00000000000000, "DIGIT", 0
(, 0, 0b00000000000000, 0b00000000010000, 0b00000000000000, "ParensOpen", 0
), 0, 0b00000000000000, 0b00000000100000, 0b00000000000000, "Close", 0
], 0, 0b00000000000000, 0b00000000100000, 0b00000000000000, "Close", 0
}, 0, 0b00000000000000, 0b00000000100000, 0b00000000000000, "Close", 0
{, 0, 0b00000000000000, 0b00000001000000, 0b00000000000000, "Special", 0
[, 0, 0b00000000000000, 0b00000001000000, 0b00000000000000, "Special", 0
",", 0, 0b00000000000000, 0b00000001000000, 0b00000000000000, "Special", 0
